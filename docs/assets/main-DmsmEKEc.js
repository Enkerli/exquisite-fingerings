(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))n(s);new MutationObserver(s=>{for(const i of s)if(i.type==="childList")for(const o of i.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&n(o)}).observe(document,{childList:!0,subtree:!0});function e(s){const i={};return s.integrity&&(i.integrity=s.integrity),s.referrerPolicy&&(i.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?i.credentials="include":s.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function n(s){if(s.ep)return;s.ep=!0;const i=e(s);fetch(s.href,i)}})();const b=11;function B(a){return a%2===0?6:5}const nt=(()=>{const a=[0];for(let t=1;t<b;t++){const e=a[t-1];a.push(e+(t%2===1?4:3))}return a})(),O=(()=>{const a=[0];for(let t=1;t<b;t++){const e=B(t-1);a.push(a[t-1]+e)}return a})();let st="intervals";function at(){return st==="chromatic"?O:nt}function $(a){if(a!=="intervals"&&a!=="chromatic")throw new Error(`Invalid grid mode: ${a}. Must be 'intervals' or 'chromatic'.`);st=a}const T=new Proxy({},{get(a,t){const e=at();if(t==="length")return e.length;const n=parseInt(t);return isNaN(n)?e[t]:e[n]}});function M(a,t){return T[a]+t}function dt(a){for(let t=0;t<b;t++)if(a>=T[t]){const e=a-T[t];if(e>=0&&e<B(t))return{row:t,col:e}}throw new Error(`Invalid pad index: ${a}`)}function ct(a,t,e=48){return e+M(a,t)}const _={portrait:{w:38,h:33}};function k(a,t,e=48){const n=_.portrait,s=t*n.w+(a%2?n.w/2:0)+e,i=(b-1-a)*n.h+e;return{x:s,y:i}}function lt(a,t,e){return[[0,-e],[.866*e,-.5*e],[.866*e,.5*e],[0,+e],[-.866*e,.5*e],[-.866*e,-.5*e]].map(([s,i])=>`${a+s},${t+i}`).join(" ")}function ut(a="portrait"){const t=_.portrait,e=6*t.w+120,n=b*t.h+120;return a==="portrait"?{width:e,height:n,viewBox:`0 0 ${e} ${n}`}:{width:n,height:e,viewBox:`0 0 ${n} ${e}`}}function it(a,t,e,n){const{x:s,y:i}=k(a,t),{x:o,y:r}=k(e,n);return Math.sqrt((o-s)**2+(r-i)**2)/_.portrait.w}const ht={C:0,"C#":1,Db:1,D:2,"D#":3,Eb:3,E:4,F:5,"F#":6,Gb:6,G:7,"G#":8,Ab:8,A:9,"A#":10,Bb:10,B:11},gt={maj:{name:"Major scale",intervals:[0,2,4,5,7,9,11],type:"scale"},natmin:{name:"Natural minor",intervals:[0,2,3,5,7,8,10],type:"scale"},harmin:{name:"Harmonic minor",intervals:[0,2,3,5,7,8,11],type:"scale"},melmin:{name:"Melodic minor",intervals:[0,2,3,5,7,9,11],type:"scale"},dorian:{name:"Dorian",intervals:[0,2,3,5,7,9,10],type:"scale"},phrygian:{name:"Phrygian",intervals:[0,1,3,5,7,8,10],type:"scale"},lydian:{name:"Lydian",intervals:[0,2,4,6,7,9,11],type:"scale"},mixolydian:{name:"Mixolydian",intervals:[0,2,4,5,7,9,10],type:"scale"},locrian:{name:"Locrian",intervals:[0,1,3,5,6,8,10],type:"scale"},majpent:{name:"Major pentatonic",intervals:[0,2,4,7,9],type:"scale"},minpent:{name:"Minor pentatonic",intervals:[0,3,5,7,10],type:"scale"},majtriad:{name:"Major triad",intervals:[0,4,7],type:"chord"},mintriad:{name:"Minor triad",intervals:[0,3,7],type:"chord"},augtriad:{name:"Augmented triad",intervals:[0,4,8],type:"chord"},dimtriad:{name:"Diminished triad",intervals:[0,3,6],type:"chord"},maj7:{name:"Major 7th",intervals:[0,4,7,11],type:"chord"},min7:{name:"Minor 7th",intervals:[0,3,7,10],type:"chord"},dom7:{name:"Dominant 7th",intervals:[0,4,7,10],type:"chord"},dim7:{name:"Diminished 7th",intervals:[0,3,6,9],type:"chord"},hdim7:{name:"Half-diminished 7th",intervals:[0,3,6,10],type:"chord"},maj9:{name:"Major 9th",intervals:[0,4,7,11,14],type:"chord"},min9:{name:"Minor 9th",intervals:[0,3,7,10,14],type:"chord"},dom9:{name:"Dominant 9th",intervals:[0,4,7,10,14],type:"chord"},chromatic:{name:"Chromatic",intervals:[0,1,2,3,4,5,6,7,8,9,10,11],type:"scale"},wholeTone:{name:"Whole tone",intervals:[0,2,4,6,8,10],type:"scale"}};function pt(a,t){const e=ht[a];if(e===void 0)throw new Error(`Invalid key: ${a}`);const n=gt[t];if(!n)throw new Error(`Invalid set type: ${t}`);const s=new Set;for(const i of n.intervals)s.add((e+i)%12);return s}function mt(a){const t=new Set;return!a||!a.trim()||a.split(",").forEach(e=>{const n=Number(e.trim());Number.isNaN(n)||t.add((n%12+12)%12)}),t}function D(a){return(a%12+12)%12}const ft={enabled:!1,app:!0,midi:!0,grid:!0,handprint:!0,shouldLog(a){return this.enabled&&this[a]}};function v(a,...t){ft.shouldLog(a)&&console.log(...t)}function tt(...a){console.error(...a)}function vt(...a){console.warn(...a)}class yt{constructor(t){this.svg=t,this.orientation="portrait",this.labelMode="pc",this.baseMidi=48,this.highlightedPCs=new Set,this.fingeringPattern=null,this.fingeringMode=!1,this.onPadClick=null}setOrientation(t){this.orientation=t}setLabelMode(t){this.labelMode=t}setBaseMidi(t){this.baseMidi=t}setHighlightedPCs(t){this.highlightedPCs=t}setFingeringPattern(t){this.fingeringPattern=t}setFingeringMode(t){this.fingeringMode=t}setPadClickHandler(t){this.onPadClick=t}render(){v("grid","[GridRenderer] render() called",{svg:this.svg,orientation:this.orientation,labelMode:this.labelMode});const t=ut(this.orientation);this.svg.setAttribute("viewBox",t.viewBox),this.svg.innerHTML="";const e=document.createElementNS("http://www.w3.org/2000/svg","g");this.orientation==="landscape"&&e.setAttribute("transform",`translate(${t.width},0) rotate(90)`);let n=0;for(let s=0;s<b;s++){const i=B(s);for(let o=0;o<i;o++)this._renderPad(e,s,o),n++}v("grid",`[GridRenderer] Rendered ${n} pads`),this.svg.appendChild(e),v("grid","[GridRenderer] Grid appended to SVG")}_renderPad(t,e,n){const{x:s,y:i}=k(e,n),o=ct(e,n,this.baseMidi),r=D(o),d=document.createElementNS("http://www.w3.org/2000/svg","polygon");if(d.setAttribute("points",lt(s,i,22)),d.setAttribute("class","pad"),d.setAttribute("stroke","#666"),d.setAttribute("fill","#6aa5ff"),d.setAttribute("fill-opacity","0.12"),this.highlightedPCs.has(r)&&d.classList.add("on"),this.fingeringMode&&d.classList.add("fingering-mode"),d.addEventListener("click",()=>{this.onPadClick&&this.onPadClick(e,n,o,r)}),t.appendChild(d),this._renderLabel(t,s,i,o,r),this.fingeringPattern){const c=this.fingeringPattern.getFingering(e,n);c&&this._renderFingering(t,s,i,c)}}_renderLabel(t,e,n,s,i){const o=this._getLabelText(s,i),r=document.createElementNS("http://www.w3.org/2000/svg","text");r.setAttribute("x",e),r.setAttribute("y",n+4),r.setAttribute("text-anchor","middle"),r.setAttribute("class","label"),this.orientation==="landscape"&&r.setAttribute("transform",`rotate(-90 ${e} ${n})`),r.textContent=o,t.appendChild(r)}_renderFingering(t,e,n,s){const i=document.createElementNS("http://www.w3.org/2000/svg","text");i.setAttribute("x",e),i.setAttribute("y",n-8),i.setAttribute("text-anchor","middle"),i.setAttribute("class",`fing ${s.hand}`),this.orientation==="landscape"&&i.setAttribute("transform",`rotate(-90 ${e} ${n})`),i.textContent=s.finger,t.appendChild(i)}_getLabelText(t,e){switch(this.labelMode){case"pc":return e;case"note":return this._midiToNoteName(t);case"midi":return t;default:return e}}_midiToNoteName(t){const e=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],n=D(t);return e[n]}}const A=[240,0,33,126,127],F=[247],R={DEV_MODE:0,SET_LED_RGB:4},Ct={PADS:1},w={NONE:0,PULSE_BLACK:63},I={ROOT:{r:127,g:0,b:127},THIRD:{r:0,g:127,b:127},FIFTH:{r:127,g:127,b:0},SEVENTH:{r:127,g:64,b:0},NINTH:{r:0,g:127,b:64},ELEVENTH:{r:64,g:0,b:127},THIRTEENTH:{r:127,g:0,b:64},DEFAULT:{r:64,g:64,b:64}};class St{constructor(t){this.output=t,this.isActive=!1,this.activeZones=0,this.padStates=new Array(61).fill(!1),this.eventHandlers={padPress:null,padRelease:null,encoder:null,button:null}}async enter(t=Ct.PADS){if(!this.output)throw new Error("No MIDI output available");const e=[...A,R.DEV_MODE,t,...F];this.output.send(e),this.isActive=!0,this.activeZones=t,console.log("[DevMode] Entered dev mode, zones:",t.toString(16))}async exit(){if(!this.output)return;const t=[...A,R.DEV_MODE,0,...F];this.output.send(t),this.isActive=!1,this.activeZones=0,this.padStates.fill(!1),console.log("[DevMode] Exited dev mode")}setPadColor(t,e,n,s,i=w.NONE){if(!this.output)return;const o=[...A,R.SET_LED_RGB,t,e&127,n&127,s&127,i&127,...F];this.output.send(o)}setPadColors(t){if(!this.output||t.length===0)return;const e=[...t].sort((n,s)=>n.id-s.id);for(const n of e)this.setPadColor(n.id,n.r,n.g,n.b,n.fx||w.NONE)}clearAllPads(){const t=[];for(let e=0;e<=60;e++)t.push({id:e,r:0,g:0,b:0,fx:w.NONE});this.setPadColors(t)}highlightChord(t,e,n=0,s=0){const i=[],o=this.calculateIntervals(t,e);for(let r=0;r<=60;r++){let d=0,c=0,l=!1;for(let f=0;f<b;f++)if(r>=O[f]){const C=r-O[f];if(C>=0&&C<B(f)){d=f,c=C,l=!0;break}}if(!l)continue;const h=nt[d]+c,m=(n+h+s)%12;if(t.includes(m)){const f=o.get(m),C=this.getColorForInterval(f,m===e);i.push({id:r,r:C.r,g:C.g,b:C.b,fx:m===e?w.PULSE_BLACK:w.NONE})}else i.push({id:r,r:0,g:0,b:0,fx:w.NONE})}this.setPadColors(i)}calculateIntervals(t,e){const n=new Map;for(const s of t){const i=(s-e+12)%12;let o;switch(i){case 0:o="root";break;case 2:o="ninth";break;case 3:case 4:o="third";break;case 5:o="eleventh";break;case 7:o="fifth";break;case 9:o="thirteenth";break;case 10:case 11:o="seventh";break;default:o="default"}n.set(s,o)}return n}getColorForInterval(t,e){if(e)return I.ROOT;switch(t){case"third":return I.THIRD;case"fifth":return I.FIFTH;case"seventh":return I.SEVENTH;case"ninth":return I.NINTH;case"eleventh":return I.ELEVENTH;case"thirteenth":return I.THIRTEENTH;default:return I.DEFAULT}}handleMidiMessage(t){if(t.length<3)return;const[e,n,s]=t,i=e&15,o=e&240;if(console.log("[DevMode] handleMidiMessage:",{status:e.toString(16),channel:i,command:o.toString(16),note:n,velocity:s}),i!==15){console.log("[DevMode] Ignoring - not channel 16");return}o===144&&s>0&&(console.log("[DevMode] Pad press detected - note:",n,"velocity:",s),this.padStates[n]=!0,this.eventHandlers.padPress?(console.log("[DevMode] Calling padPress handler"),this.eventHandlers.padPress(n,s)):console.log("[DevMode] No padPress handler registered!")),(o===128||o===144&&s===0)&&(console.log("[DevMode] Pad release detected - note:",n),this.padStates[n]=!1,this.eventHandlers.padRelease&&this.eventHandlers.padRelease(n)),o===176&&(this.eventHandlers.encoder&&n>=110&&n<=113?this.eventHandlers.encoder(n-110,s):this.eventHandlers.button&&this.eventHandlers.button(n,s))}on(t,e){this.eventHandlers.hasOwnProperty(t)&&(this.eventHandlers[t]=e)}getPadStates(){return[...this.padStates]}isPadPressed(t){return this.padStates[t]||!1}}class Et{constructor(){this.midiAccess=null,this.selectedOutput=null,this.isSupported=typeof navigator<"u"&&"requestMIDIAccess"in navigator,this.activeNotes=new Map,this.holdDuration=1e3,this.octaveRange=0,this.isHolding=!1,this.devMode=null}async init(){if(!this.isSupported)throw new Error("WebMIDI not supported in this browser");try{return v("midi","[MIDI] Requesting MIDI access with SysEx permission..."),this.midiAccess=await navigator.requestMIDIAccess({sysex:!0}),v("midi","[MIDI] ✓ MIDI access granted with SysEx support"),this.midiAccess.onstatechange=()=>{this._onDeviceStateChange()},!0}catch(t){throw tt("[MIDI] ✗ MIDI initialization failed:",t),new Error(`MIDI initialization failed: ${t.message}`)}}getOutputDevices(){return this.midiAccess?Array.from(this.midiAccess.outputs.values()).map(t=>({id:t.id,name:t.name})):[]}selectOutputDevice(t){if(!this.midiAccess)return!1;const e=this.midiAccess.outputs.get(t);return e?(this.selectedOutput=e,this.devMode&&(this.devMode.output=e),!0):!1}getDevMode(){return this.devMode||(this.devMode=new St(this.selectedOutput)),this.devMode}setHoldDuration(t){this.holdDuration=Math.max(100,Math.min(t,3e4))}setOctaveRange(t){this.octaveRange=Math.max(0,Math.min(t,2))}noteOn(t,e=100){if(!(!this.selectedOutput||t<0||t>127))try{this.selectedOutput.send([144,t,e])}catch(n){console.error("MIDI send error:",n)}}noteOff(t){if(!(!this.selectedOutput||t<0||t>127))try{this.selectedOutput.send([128,t,0])}catch(e){console.error("MIDI send error:",e)}}playNote(t,e=100,n=null){const s=n!==null?n:this.holdDuration;this._getOctaveNotes(t).forEach(o=>{this.noteOn(o,e),this.isHolding?this.activeNotes.set(o,{velocity:e,time:Date.now()}):setTimeout(()=>{this.noteOff(o)},s)})}playChord(t,e=100,n=null,s=0){t.forEach((i,o)=>{setTimeout(()=>{this.playNote(i,e,n)},o*s)})}enableHold(){this.isHolding=!0,this.activeNotes.clear()}disableHold(){this.isHolding=!1,this.releaseAllNotes()}releaseAllNotes(){for(const[t]of this.activeNotes)this.noteOff(t);this.activeNotes.clear()}allNotesOff(){if(this.selectedOutput){try{for(let t=0;t<16;t++)this.selectedOutput.send([176+t,123,0])}catch(t){console.error("MIDI send error:",t)}this.activeNotes.clear()}}_getOctaveNotes(t){const e=[t];for(let n=1;n<=this.octaveRange;n++){const s=t+12*n,i=t-12*n;s<=127&&e.push(s),i>=0&&e.push(i)}return e}_onDeviceStateChange(){this.selectedOutput&&(this.midiAccess.outputs.get(this.selectedOutput.id)||(this.selectedOutput=null))}setNoteHandler(t,e=!1){if(this.noteHandler=t,this.devModeActive=e,this.midiAccess){const n=this.midiAccess.inputs.values();for(const s of n)t?s.onmidimessage=i=>this._handleMidiInput(i):s.onmidimessage=null}}_handleMidiInput(t){const[e,n,s]=t.data,i=e&240,o=e&15;if(this.devModeActive&&(v("midi","[MIDI IN] Status:",e.toString(16).padStart(2,"0").toUpperCase(),"Channel:",o,"Note/Data1:",n,"Velocity/Data2:",s,"Type:",i.toString(16).padStart(2,"0").toUpperCase()),this.devMode&&this.devMode.handleMidiMessage(t.data)),this.devModeActive&&o===15){if(v("midi","[DEV MODE] Channel 16 message detected! Pad ID:",n,"Velocity:",s),i===144||i===128){const r=i===128?0:s,d=n;v("midi","[DEV MODE] Triggering handler with pad ID:",d,"velocity:",r),this.noteHandler&&this.noteHandler(d,r)}return}if(i===144||i===128){const r=i===128?0:s;v("midi","[NORMAL MODE] Note event - Note:",n,"Velocity:",r),this.noteHandler&&this.noteHandler(n,r)}}sendSysEx(t){if(!this.selectedOutput){vt("[SYSEX] ⚠️ No MIDI output device selected - cannot send SysEx");return}const e=t.map(n=>n.toString(16).padStart(2,"0").toUpperCase()).join(" ");v("midi",`[SYSEX] Sending to ${this.selectedOutput.name}:`,e);try{this.selectedOutput.send(t),v("midi","[SYSEX] ✓ Sent successfully")}catch(n){tt("[SYSEX] ✗ Send error:",n)}}enterExquisDeveloperMode(){v("midi","[DEV MODE] 🔧 Entering Exquis Developer Mode...");const t=[240,0,33,126,127,0,1,247];this.sendSysEx(t),v("midi","[DEV MODE] ✓ Developer Mode command sent (pads should now send pad IDs on channel 16)")}exitExquisDeveloperMode(){v("midi","[DEV MODE] 🔧 Exiting Exquis Developer Mode...");const t=[240,0,33,126,127,0,0,247];this.sendSysEx(t),v("midi","[DEV MODE] ✓ Exit command sent (pads should return to normal mode)")}getStatus(){var e;const t={isSupported:this.isSupported,isInitialized:this.midiAccess!==null,hasDevice:this.selectedOutput!==null,deviceName:((e=this.selectedOutput)==null?void 0:e.name)||null,isHolding:this.isHolding,activeNoteCount:this.activeNotes.size,holdDuration:this.holdDuration,octaveRange:this.octaveRange};return t.isEnabled=t.isInitialized,t}_oldGetStatus(){var t;return{isSupported:this.isSupported,isInitialized:this.midiAccess!==null,hasDevice:this.selectedOutput!==null,deviceName:((t=this.selectedOutput)==null?void 0:t.name)||null,isHolding:this.isHolding,activeNoteCount:this.activeNotes.size,holdDuration:this.holdDuration,octaveRange:this.octaveRange}}}const p=new Et;class E{constructor(t="Untitled"){this.name=t,this.fingerings=new Map,this.metadata={key:null,setType:null,baseMidi:48,createdAt:Date.now(),modifiedAt:Date.now()}}setFingering(t,e,n,s){const i=`${t},${e}`;this.fingerings.set(i,{hand:n,finger:s}),this.metadata.modifiedAt=Date.now()}getFingering(t,e){const n=`${t},${e}`;return this.fingerings.get(n)||null}removeFingering(t,e){const n=`${t},${e}`;this.fingerings.delete(n),this.metadata.modifiedAt=Date.now()}clearAll(){this.fingerings.clear(),this.metadata.modifiedAt=Date.now()}getPadsForHand(t){const e=[];for(const[n,s]of this.fingerings)if(s.hand===t){const[i,o]=n.split(",").map(Number);e.push({row:i,col:o,finger:s.finger})}return e}getPadsForFinger(t,e=null){const n=[];for(const[s,i]of this.fingerings)if(i.finger===t&&(!e||i.hand===e)){const[o,r]=s.split(",").map(Number);n.push({row:o,col:r,hand:i.hand})}return n}toJSON(){return{name:this.name,fingerings:Array.from(this.fingerings.entries()),metadata:this.metadata}}static fromJSON(t){const e=new E(t.name);return e.fingerings=new Map(t.fingerings),e.metadata=t.metadata,e}}class It{constructor(){this.fingerWeights={1:.8,2:1,3:.9,4:.6,5:.4},this.handSizes={small:{maxStretch:2.5,comfortableStretch:1.5},medium:{maxStretch:3,comfortableStretch:2},large:{maxStretch:3.5,comfortableStretch:2.5}},this.currentHandSize="medium"}setHandSize(t){t==="custom"?this.currentHandSize="custom":this.handSizes[t]&&(this.currentHandSize=t)}setCustomHandprint(t){const e=Object.values(t),n=Math.max(...e),s=e.reduce((i,o)=>i+o,0)/e.length;this.handSizes.custom={maxStretch:n*1.1,comfortableStretch:s,measurements:t},this.currentHandSize="custom"}analyzePattern(t){let e=100;const n=[];return["left","right"].forEach(s=>{const i=t.getPadsForHand(s);if(i.length===0)return;const o=this._analyzeSpan(i,s,n);e-=o;const r=this._analyzeFingerStrength(i,n);e+=r;const d=this._analyzeFingerCrossings(i,s,n);e-=d}),{score:Math.max(0,Math.min(100,e)),issues:n,recommendation:this._getRecommendation(e)}}suggestFingerings(t,e,n=48){if(t.length===0)return[];const s=new Map;t.forEach(r=>{const d=M(r.row,r.col),c=n+d,l=c%12;if(!s.has(l))s.set(l,{...r,pc:l,midiNote:c});else{const h=s.get(l);(r.row<h.row||r.row===h.row&&r.col<h.col)&&s.set(l,{...r,pc:l,midiNote:c})}});const i=Array.from(s.values());let o=i;return i.length>5&&(o=[...i].sort((r,d)=>{const c=r.row*2+r.col,l=d.row*2+d.col;return c-l}).slice(0,5)),this._assignFingersAnatomically(o,e)}_assignFingersAnatomically(t,e){if(t.length===0)return[];const s=[...t].sort((c,l)=>c.row!==l.row?c.row-l.row:e==="right"?c.col-l.col:l.col-c.col)[0],i=[];i.push({row:s.row,col:s.col,hand:e,finger:1,score:1});const o=t.filter(c=>!(c.row===s.row&&c.col===s.col));if(o.length===0)return i;const r=o.map(c=>{const l=c.row-s.row,h=c.col-s.col,g=Math.sqrt(l*l+h*h),m=e==="right"?l+h:l-h;return{pad:c,distance:g,directionScore:m,score:m*2-g*.5}}).sort((c,l)=>l.score-c.score),d=[2,3,4,5];return r.slice(0,4).forEach((c,l)=>{i.push({row:c.pad.row,col:c.pad.col,hand:e,finger:d[l],score:.8})}),i}_analyzeSpan(t,e,n){const s=this.handSizes[this.currentHandSize];let i=0;const o=[...t].sort((r,d)=>r.finger-d.finger);for(let r=0;r<o.length-1;r++){const d=o[r],c=o[r+1];if(d.finger===c.finger)continue;const l=it(d.row,d.col,c.row,c.col);l>s.maxStretch?(i+=20,n.push({type:"excessive_stretch",hand:e,fingers:[d.finger,c.finger],distance:l})):l>s.comfortableStretch&&(i+=5,n.push({type:"uncomfortable_stretch",hand:e,fingers:[d.finger,c.finger],distance:l}))}return i}_analyzeFingerStrength(t,e){let n=0;return t.forEach(s=>{const i=this.fingerWeights[s.finger];i>=.9?n+=2:i<=.5&&(n-=1)}),n}_analyzeFingerCrossings(t,e,n){let s=0;const i=new Set,o=[...t].sort((r,d)=>r.finger-d.finger);for(let r=0;r<o.length-1;r++){const d=o[r],c=o[r+1],l=`${d.finger}-${c.finger}`;i.has(l)||d.row>c.row&&(s+=5,i.add(l),n.push({type:"finger_crossing",hand:e,fingers:[d.finger,c.finger]}))}return s}_getRecommendation(t){return t>=90?"Excellent ergonomics!":t>=75?"Good fingering, comfortable to play":t>=60?"Acceptable, but could be improved":t>=40?"Uncomfortable, consider revising":"Poor ergonomics, recommend different fingering"}_suggestMultiHandFingering(t){const e=Math.floor(t.length/2),n=t.slice(0,e),s=t.slice(e);return[...this.suggestFingerings(n,"left"),...this.suggestFingerings(s,"right")]}}const H=new It,x={PATTERNS:"exquisPatterns",SETTINGS:"exquisSettings",RECENT_PATTERNS:"exquisRecentPatterns"};function xt(a,t){const e=L();e[a]={...t,savedAt:Date.now()},localStorage.setItem(x.PATTERNS,JSON.stringify(e)),Dt(a)}function Mt(a){return L()[a]||null}function bt(a){const t=L();return t[a]?(delete t[a],localStorage.setItem(x.PATTERNS,JSON.stringify(t)),Ht(a),!0):!1}function L(){try{const a=localStorage.getItem(x.PATTERNS);return a?JSON.parse(a):{}}catch(a){return console.error("Error loading patterns:",a),{}}}function wt(){return Object.keys(L()).sort()}function S(a){localStorage.setItem(x.SETTINGS,JSON.stringify(a))}function Pt(){try{const a=localStorage.getItem(x.SETTINGS);return a?JSON.parse(a):et()}catch(a){return console.error("Error loading settings:",a),et()}}function et(){return{orientation:"portrait",labelMode:"pc",baseMidi:48,midiHoldDuration:1e3,midiOctaveRange:0,handSize:"medium",theme:"light"}}function Dt(a){let t=rt();t=t.filter(e=>e!==a),t.unshift(a),t=t.slice(0,10),localStorage.setItem(x.RECENT_PATTERNS,JSON.stringify(t))}function Ht(a){let t=rt();t=t.filter(e=>e!==a),localStorage.setItem(x.RECENT_PATTERNS,JSON.stringify(t))}function rt(){try{const a=localStorage.getItem(x.RECENT_PATTERNS);return a?JSON.parse(a):[]}catch{return[]}}function Nt(a,t,e){const n=[];function s(i,o){const r=o.length;if(r>=t&&r<=e&&n.push([...o]),r!==e)for(let d=i;d<a.length;d++)o.push(a[d]),s(d+1,o),o.pop()}return s(0,[]),n}function Bt(a,t,e=48,n=null){const s=new Set(a),i=[],o=n?t.filter(r=>r.hand===n):t;for(const r of o){const d=Nt(r.positions,3,5);for(const c of d){const l=r.baseMidi||e,h=c.map(m=>{const f=M(m.row,m.col),C=l+f;return D(C)}),g=new Set(h);if([...s].every(m=>g.has(m))&&g.size>=s.size){const m={handprintId:r.id,hand:r.hand,comfortRating:r.comfortRating||50,baseMidi:l,midiDevice:r.midiDevice,capturedAt:r.capturedAt,positions:c.map(f=>{const C=M(f.row,f.col),P=l+C;return{row:f.row,col:f.col,padIndex:C,midiNote:P,finger:f.finger,pitchClass:D(P)}}),score:0,geometricScore:0,ergonomicScore:0};i.push(m)}}}return i}function Lt(a){const t=a.map(e=>e.finger).sort((e,n)=>e-n);for(let e=1;e<t.length;e++)if(t[e]!==t[e-1]+1)return!1;return!0}function $t(a){let t=0;for(let e=0;e<a.length;e++)for(let n=e+1;n<a.length;n++){const s=a[n].col-a[e].col,i=a[n].row-a[e].row,o=Math.sqrt(s*s+i*i);t=Math.max(t,o)}return t}function At(a){const t=Ft(a),e=Rt(a),n=Ot(a),s=t*.4+e*.3+n*.3;return{...a,score:Math.round(s),comfortScore:Math.round(t),geometricScore:Math.round(e),ergonomicScore:Math.round(n)}}function Ft(a){return a.comfortRating||50}function Rt(a){const t=$t(a.positions);let e;t<=3?e=100:t<=5?e=100-(t-3)*15:t<=7?e=70-(t-5)*15:e=Math.max(0,40-(t-7)*10);const n=a.positions.map(d=>d.row),s=Math.min(...n),o=Math.max(...n)-s,r=o<=2?100:Math.max(0,100-(o-2)*20);return(e+r)/2}function Ot(a){let t=50;Lt(a.positions)&&(t+=30);const e=a.positions.length;e===3||e===4?t+=20:e===5&&(t+=10);const n=a.positions.map(s=>s.finger).sort((s,i)=>s-i);return n.includes(1)&&n.includes(5)&&!n.includes(2)&&!n.includes(3)&&!n.includes(4)&&(t-=30),n.length===2&&n[0]===1&&n[1]===5&&(t-=20),Math.max(0,Math.min(100,t))}function Tt(a){return a.map(t=>At(t)).sort((t,e)=>e.score-t.score)}function kt(a,t=null){const e=t?a.filter(r=>r.hand===t):a;if(e.length===0)return null;const n={hand:t,fingerDistances:{},spanDistances:[],fingerAssignments:{},chordShapes:[],avgComfort:0};let s=0;for(const r of e){if(s+=r.comfortRating||50,r.measurements)for(const[h,g]of Object.entries(r.measurements))n.fingerDistances[h]||(n.fingerDistances[h]=[]),n.fingerDistances[h].push(g);const d=r.positions;let c=0;for(let h=0;h<d.length;h++)for(let g=h+1;g<d.length;g++){const m=d[g].col-d[h].col,f=d[g].row-d[h].row,C=Math.sqrt(m*m+f*f);c=Math.max(c,C)}n.spanDistances.push(c);for(const h of d){const g=`r${h.row}c${h.col}`;n.fingerAssignments[g]||(n.fingerAssignments[g]={});const m=h.finger;n.fingerAssignments[g][m]=(n.fingerAssignments[g][m]||0)+1}const l=_t(r);l&&n.chordShapes.push(l)}n.avgComfort=s/e.length;for(const[r,d]of Object.entries(n.fingerDistances)){const c=d.reduce((h,g)=>h+g,0)/d.length,l=d.reduce((h,g)=>h+Math.pow(g-c,2),0)/d.length;n.fingerDistances[r]={avg:c,stdDev:Math.sqrt(l),samples:d.length}}const i=n.spanDistances.reduce((r,d)=>r+d,0)/n.spanDistances.length,o=n.spanDistances.reduce((r,d)=>r+Math.pow(d-i,2),0)/n.spanDistances.length;return n.avgSpan=i,n.spanStdDev=Math.sqrt(o),n}function _t(a){const t=a.positions;if(t.length<3)return null;const e=[...t].sort((i,o)=>i.finger-o.finger),n=e[0],s=e.map(i=>({finger:i.finger,rowOffset:i.row-n.row,colOffset:i.col-n.col,distance:Math.sqrt(Math.pow(i.row-n.row,2)+Math.pow(i.col-n.col,2))}));return{numFingers:t.length,fingers:e.map(i=>i.finger),geometry:s,comfort:a.comfortRating||50}}function jt(a,t,e){const n=`r${a}c${t}`,s=e.fingerAssignments[n];if(!s)return null;let i=null,o=0;for(const[r,d]of Object.entries(s))d>o&&(o=d,i=parseInt(r));return i}function zt(a,t){if(!t||t.chordShapes.length===0)return 50;let e=0;for(const n of t.chordShapes){let s=0;a.positions.length===n.numFingers&&(s+=20);const i=qt(a.positions),o=Math.abs(i-t.avgSpan),r=Math.max(0,30-o*10);s+=r,s+=n.comfort/2,e=Math.max(e,s)}return Math.min(100,e)}function qt(a){let t=0;for(let e=0;e<a.length;e++)for(let n=e+1;n<a.length;n++){const s=a[n].col-a[e].col,i=a[n].row-a[e].row,o=Math.sqrt(s*s+i*i);t=Math.max(t,o)}return t}function Gt(a,t=48,e=5){const n=new Map;for(const r of a)n.set(r,[]);for(let r=0;r<=e;r++)for(let d=0;d<(r%2===0?6:5);d++){const c=M(r,d),l=t+c,h=D(l);n.has(h)&&n.get(h).push({row:r,col:d,padIndex:c,midiNote:l,pc:h})}const s=[],i=Array.from(n.keys());function o(r,d){if(r===i.length){s.push([...d]);return}const c=i[r],h=n.get(c).slice(0,3);for(const g of h)d.push(g),o(r+1,d),d.pop()}return o(0,[]),s}function Ut(a,t,e=null){if(a.length===0)return[];a.length>5&&(a=a.slice(0,5));const n=[...a].sort((o,r)=>o.row!==r.row?o.row-r.row:t==="right"?o.col-r.col:r.col-o.col),s=new Set,i=[];for(let o=0;o<n.length;o++){const r=n[o];let d=null;if(e){const c=jt(r.row,r.col,e);c&&!s.has(c)&&(d=c)}if(!d){for(let c=1;c<=5;c++)if(!s.has(c)){d=c;break}}d&&(s.add(d),i.push({...r,finger:d,hand:t}))}return i}function Vt(a,t){let e=50;if(t){const i=zt(a,t);e=(e+i)/2}const n=Jt(a.positions);n<1.5?e+=10:n<=3?e+=5:n>4&&(e-=20);const s=a.positions.reduce((i,o)=>i+o.row,0)/a.positions.length;return e+=Math.max(0,10-s*2),Math.min(100,Math.max(0,e))}function Jt(a){let t=0;for(let e=0;e<a.length;e++)for(let n=e+1;n<a.length;n++){const s=it(a[e].row,a[e].col,a[n].row,a[n].col);t=Math.max(t,s)}return t}function Wt(a,t,e=48,n="right",s=5){const i=kt(t,n),o=Gt(a,e);if(o.length===0)return[];const r=o.map(d=>{const c=Ut(d,n,i),l={hand:n,baseMidi:e,positions:c,targetPitchClasses:a,score:0};return l.score=Vt(l,i),l});return r.sort((d,c)=>c.score-d.score),r.slice(0,s)}const Qt={major:[0,4,7],minor:[0,3,7],dim:[0,3,6],aug:[0,4,8],sus2:[0,2,7],sus4:[0,5,7],maj7:[0,4,7,11],min7:[0,3,7,10],dom7:[0,4,7,10],dim7:[0,3,6,9],hdim7:[0,3,6,10],minmaj7:[0,3,7,11],aug7:[0,4,8,10],maj9:[0,4,7,11,14],min9:[0,3,7,10,14],dom9:[0,4,7,10,14],6:[0,4,7,9],min6:[0,3,7,9]},Yt={major:"Major",minor:"Minor",dim:"Diminished",aug:"Augmented",sus2:"Sus2",sus4:"Sus4",maj7:"Major 7th",min7:"Minor 7th",dom7:"Dominant 7th",dim7:"Diminished 7th",hdim7:"Half-dim 7th",minmaj7:"Minor-Major 7th",aug7:"Augmented 7th",maj9:"Major 9th",min9:"Minor 9th",dom9:"Dominant 9th",6:"6th",min6:"Minor 6th"},Kt=["C","C#/Db","D","D#/Eb","E","F","F#/Gb","G","G#/Ab","A","A#/Bb","B"];function Xt(a,t){const e=Qt[t];if(!e)throw new Error(`Unknown chord quality: ${t}`);return e.map(n=>(a+n)%12)}function N(a,t){const e=Kt[a],n=Yt[t]||t;return`${e} ${n}`}class Zt{constructor(){v("app","[APP] Constructor started"),$("intervals"),v("app","[APP] Grid mode set to intervals"),this.settings=Pt(),this.currentPattern=new E,this.currentFinger=1,this.currentHand="right",this.fingeringMode=!1,this.handprintMode=!1,this.handprintCaptureState=null,this.handprintCaptures=[],this.handprintCaptureHand="right",this.handprintSessionBaseMidi=null,this.handprintSessionID=null,this.handprintSessionCount=0,this.savedHandprints=this.settings.handprints||[],this.currentSuggestions=[],this.currentSuggestionIndex=0,this.currentSuggestionRating=3,this.suggestionEditMode=!1,this.editingPad=null,this.chordCaptureActive=!1,this.chordCaptureHand="right",this.chordCaptureSequence=[],this.chordCapturePitchClasses=[],this.chordCaptureRoot=0,this.chordCaptureQuality="dom7",this.savedChordFingerings=this.settings.chordFingerings||[],this.gridElement=document.getElementById("grid"),v("app","[APP] Grid element:",this.gridElement),this.gridRenderer=new yt(this.gridElement),v("app","[APP] GridRenderer created"),this.initUI(),this.loadStoredSettings(),this.updatePatternMetadata(),this.updateHandprintList(),v("app","[APP] About to call initial render()"),this.render(),v("app","[APP] Constructor completed")}initUI(){var o,r,d,c,l,h,g,m,f,C,P,j,z,q,G,U,V,J,W,Q,Y,K,X,Z;document.querySelectorAll('input[name="ori"]').forEach(u=>{u.addEventListener("change",()=>{this.settings.orientation=u.value,this.render(),S(this.settings)})}),document.querySelectorAll('input[name="lab"]').forEach(u=>{u.addEventListener("change",()=>{this.settings.labelMode=u.value,this.render(),S(this.settings)})}),document.getElementById("key").addEventListener("change",()=>{this.updatePatternMetadata(),this.render(),this.updateMIDIHoldIfActive()}),document.getElementById("set").addEventListener("change",u=>{const y=u.target.value==="custom";document.getElementById("customPC").disabled=!y,this.updatePatternMetadata(),this.render(),this.updateMIDIHoldIfActive()}),document.getElementById("customPC").addEventListener("input",()=>{this.render(),this.updateMIDIHoldIfActive()}),document.getElementById("baseMidi").addEventListener("input",u=>{this.settings.baseMidi=parseInt(u.target.value),this.render(),this.updateMIDIHoldIfActive(),S(this.settings)}),document.getElementById("fingeringMode").addEventListener("change",u=>{this.fingeringMode=u.target.checked,document.getElementById("fingeringModeInfo").style.display=this.fingeringMode?"block":"none",document.querySelectorAll(".finger-btn").forEach(y=>{y.disabled=!this.fingeringMode}),this.render()}),document.getElementById("fingeringHand").addEventListener("change",u=>{this.currentHand=u.target.value});for(let u=1;u<=5;u++)document.getElementById(`fingBtn${u}`).addEventListener("click",()=>{this.currentFinger=u,this.updateFingerButtonState()});document.addEventListener("keydown",u=>{this.fingeringMode&&u.key>="1"&&u.key<="5"&&(this.currentFinger=parseInt(u.key),this.updateFingerButtonState())}),document.getElementById("clearFingerings").addEventListener("click",()=>{this.currentPattern.clearAll(),this.render()}),document.getElementById("suggestFingerings").addEventListener("click",()=>{this.suggestFingerings()}),document.getElementById("savePattern").addEventListener("click",()=>this.saveCurrentPattern()),document.getElementById("loadPattern").addEventListener("change",u=>{u.target.value&&this.loadPatternByName(u.target.value)}),document.getElementById("deletePattern").addEventListener("click",()=>this.deleteCurrentPattern()),document.getElementById("exportPattern").addEventListener("click",()=>this.exportPattern()),document.getElementById("importPatternBtn").addEventListener("click",()=>{document.getElementById("importPattern").click()}),document.getElementById("importPattern").addEventListener("change",u=>this.importPattern(u)),document.getElementById("enableMidi").addEventListener("click",()=>this.initMIDI()),document.getElementById("midiDevice").addEventListener("change",u=>{u.target.value&&(p.selectOutputDevice(u.target.value),this.updateMIDIStatus())});const t=document.getElementById("midiHoldDuration"),e=document.getElementById("holdDurationValue");t==null||t.addEventListener("input",u=>{const y=parseInt(u.target.value);e.textContent=`${(y/1e3).toFixed(1)}s`,p.setHoldDuration(y),this.settings.midiHoldDuration=y,S(this.settings)});const n=document.getElementById("midiOctaveRange"),s=document.getElementById("octaveRangeValue");n==null||n.addEventListener("input",u=>{const y=parseInt(u.target.value);s.textContent=y===0?"0 (none)":`±${y}`,p.setOctaveRange(y),this.settings.midiOctaveRange=y,S(this.settings)});const i=document.getElementById("midiHoldToggle");i==null||i.addEventListener("change",u=>{u.target.checked?(p.enableHold(),this.sendHighlightedNotes()):p.disableHold()}),(o=document.getElementById("midiSendHighlighted"))==null||o.addEventListener("click",()=>{this.sendHighlightedNotes()}),(r=document.getElementById("analyzeErgo"))==null||r.addEventListener("click",()=>{this.analyzeErgonomics()}),(d=document.getElementById("handSize"))==null||d.addEventListener("change",u=>{const y=u.target.value;H.setHandSize(y),this.settings.handSize=y,S(this.settings)}),(c=document.getElementById("captureLeftHand"))==null||c.addEventListener("click",()=>{this.selectChordCaptureHand("left")}),(l=document.getElementById("captureRightHand"))==null||l.addEventListener("click",()=>{this.selectChordCaptureHand("right")}),(h=document.getElementById("startChordCapture"))==null||h.addEventListener("click",()=>{this.startChordCapture()}),(g=document.getElementById("stopChordCapture"))==null||g.addEventListener("click",()=>{this.stopChordCapture()}),(m=document.getElementById("saveCapturedFingering"))==null||m.addEventListener("click",()=>{this.saveChordFingering()}),(f=document.getElementById("discardCapturedFingering"))==null||f.addEventListener("click",()=>{this.discardChordFingering()}),(C=document.getElementById("captureComfort"))==null||C.addEventListener("input",u=>{document.getElementById("captureComfortValue").textContent=u.target.value}),(P=document.getElementById("selectLeftHand"))==null||P.addEventListener("click",()=>{this.selectHandForCapture("left")}),(j=document.getElementById("selectRightHand"))==null||j.addEventListener("click",()=>{this.selectHandForCapture("right")}),(z=document.getElementById("startHandprintCapture"))==null||z.addEventListener("click",()=>{this.startHandprintCapture()}),(q=document.getElementById("exportHandprints"))==null||q.addEventListener("click",()=>{this.exportHandprints()}),(G=document.getElementById("clearHandprints"))==null||G.addEventListener("click",()=>{this.clearAllHandprints()}),(U=document.getElementById("clearChordNotes"))==null||U.addEventListener("click",()=>{document.querySelectorAll('input[name="chordNote"]').forEach(u=>{u.checked=!1})}),(V=document.getElementById("findChordFingerings"))==null||V.addEventListener("click",()=>{this.findChordFingeringSuggestions()}),(J=document.getElementById("generateSuggestion"))==null||J.addEventListener("click",()=>{this.generateChordSuggestion()}),(W=document.getElementById("saveSuggestion"))==null||W.addEventListener("click",()=>{this.saveSuggestionAsPattern()}),(Q=document.getElementById("nextSuggestion"))==null||Q.addEventListener("click",()=>{this.showNextSuggestion()}),(Y=document.getElementById("comfortRating"))==null||Y.addEventListener("input",u=>{this.currentSuggestionRating=parseInt(u.target.value),document.getElementById("comfortRatingValue").textContent=u.target.value}),(K=document.getElementById("key"))==null||K.addEventListener("change",()=>{var u;(u=document.getElementById("autoSuggestChords"))!=null&&u.checked&&this.generateChordSuggestion()}),(X=document.getElementById("set"))==null||X.addEventListener("change",()=>{var u;(u=document.getElementById("autoSuggestChords"))!=null&&u.checked&&this.generateChordSuggestion()}),(Z=document.getElementById("fingeringType"))==null||Z.addEventListener("change",u=>{this.settings.fingeringType=u.target.value,S(this.settings)}),this.gridRenderer.setPadClickHandler((u,y,ot,te)=>{this.handprintMode?this.handleHandprintClick(u,y):this.suggestionEditMode?this.handleSuggestionEditClick(u,y):this.fingeringMode?this.handleFingeringClick(u,y):p.playNote(ot)})}loadStoredSettings(){const t=document.querySelector(`input[name="ori"][value="${this.settings.orientation}"]`);t&&(t.checked=!0);const e=document.querySelector(`input[name="lab"][value="${this.settings.labelMode}"]`);e&&(e.checked=!0);const n=document.getElementById("baseMidi");n&&(n.value=this.settings.baseMidi);const s=document.getElementById("midiHoldDuration");s&&(s.value=this.settings.midiHoldDuration,document.getElementById("holdDurationValue").textContent=`${(this.settings.midiHoldDuration/1e3).toFixed(1)}s`,p.setHoldDuration(this.settings.midiHoldDuration));const i=document.getElementById("midiOctaveRange");if(i){i.value=this.settings.midiOctaveRange;const r=this.settings.midiOctaveRange;document.getElementById("octaveRangeValue").textContent=r===0?"0 (none)":`±${r}`,p.setOctaveRange(r)}const o=document.getElementById("handSize");o&&(o.value=this.settings.handSize,H.setHandSize(this.settings.handSize)),this.updatePatternList()}render(){if(v("app","[APP] render() called"),this.gridRenderer.setOrientation(this.settings.orientation),this.gridRenderer.setLabelMode(this.settings.labelMode),this.gridRenderer.setBaseMidi(this.settings.baseMidi),this.handprintMode?this.gridRenderer.setHighlightedPCs(new Set):this.gridRenderer.setHighlightedPCs(this.getHighlightedPCs()),this.handprintMode)if(this.handprintCaptures.length>0){const t=new E("temp_handprint");this.handprintCaptures.forEach(e=>{t.setFingering(e.row,e.col,this.handprintCaptureHand,e.finger)}),this.gridRenderer.setFingeringPattern(t)}else this.gridRenderer.setFingeringPattern(new E("empty"));else this.gridRenderer.setFingeringPattern(this.currentPattern);this.gridRenderer.setFingeringMode(this.fingeringMode||this.handprintMode),this.gridRenderer.render(),v("app","[APP] render() completed")}getHighlightedPCs(){const t=document.getElementById("set").value;if(t==="custom"){const e=document.getElementById("customPC").value;return mt(e)}else{const e=document.getElementById("key").value;return pt(e,t)}}handleFingeringClick(t,e){const n=this.currentPattern.getFingering(t,e);n&&n.hand===this.currentHand&&n.finger===this.currentFinger?this.currentPattern.removeFingering(t,e):this.currentPattern.setFingering(t,e,this.currentHand,this.currentFinger),this.render()}updateFingerButtonState(){for(let t=1;t<=5;t++){const e=document.getElementById(`fingBtn${t}`);e.style.opacity=t===this.currentFinger?"1":"0.5"}}suggestFingerings(){const t=this.getHighlightedPCs();if(t.size===0){alert("No notes highlighted. Please select a key and scale/chord first.");return}const e=[];for(let o=0;o<11;o++)for(let r=0;r<(o%2===0?6:5);r++){const d=M(o,r),l=(this.settings.baseMidi+d)%12;t.has(l)&&e.push({row:o,col:r})}if(e.length===0){alert("No pads match the selected notes in the current range.");return}const n=document.getElementById("fingeringHand").value,s=H.suggestFingerings(e,n,this.settings.baseMidi);this.currentPattern.getPadsForHand(n).forEach(o=>{this.currentPattern.removeFingering(o.row,o.col)}),s.forEach(o=>{this.currentPattern.setFingering(o.row,o.col,o.hand,o.finger)}),this.render(),alert(`Suggested fingerings for ${s.length} pads (${n} hand)`)}saveCurrentPattern(){const t=document.getElementById("patternName").value.trim();if(!t){alert("Please enter a pattern name");return}const e={...this.currentPattern.toJSON(),key:document.getElementById("key").value,set:document.getElementById("set").value,baseMidi:this.settings.baseMidi};xt(t,e),this.updatePatternList(),document.getElementById("patternName").value="",alert(`Pattern "${t}" saved!`)}loadPatternByName(t){const e=Mt(t);if(!e){alert(`Pattern "${t}" not found`);return}this.currentPattern=E.fromJSON(e),document.getElementById("key").value=e.key,document.getElementById("set").value=e.set,this.settings.baseMidi=e.baseMidi,document.getElementById("baseMidi").value=e.baseMidi,this.render()}deleteCurrentPattern(){const t=document.getElementById("loadPattern").value;if(!t){alert("Please select a pattern to delete");return}confirm(`Delete pattern "${t}"?`)&&(bt(t),this.updatePatternList(),document.getElementById("loadPattern").value="")}exportPattern(){if(this.currentPattern.fingerings.size===0){alert("No fingerings to export. Create a fingering pattern first.");return}this.updatePatternMetadata();const t=document.getElementById("patternName");t.value.trim()&&(this.currentPattern.name=t.value.trim());let e;if(this.currentPattern.name==="Untitled"||!this.currentPattern.name.trim()){const r=this.currentPattern.metadata.key||"C",d=this.currentPattern.metadata.setType||"major",c=this.currentHand||"right",l=new Date().toISOString().slice(11,19).replace(/:/g,"");e=`${r}_${d}_${c}_${l}`}else e=this.currentPattern.name;const n=JSON.stringify(this.currentPattern.toJSON(),null,2),s=new Blob([n],{type:"application/json"}),i=URL.createObjectURL(s),o=document.createElement("a");o.href=i,o.download=`${e.replace(/[^a-z0-9]/gi,"_").toLowerCase()}.json`,document.body.appendChild(o),o.click(),document.body.removeChild(o),URL.revokeObjectURL(i),alert(`Exported "${this.currentPattern.name}" to JSON file`)}importPattern(t){const e=t.target.files[0];if(!e)return;const n=new FileReader;n.onload=s=>{try{const i=JSON.parse(s.target.result),o=E.fromJSON(i);this.currentPattern=o,document.getElementById("patternName").value=o.name,this.render(),alert(`Imported "${o.name}" with ${o.fingerings.size} fingerings`),t.target.value=""}catch(i){alert(`Error importing file: ${i.message}`),console.error("Import error:",i)}},n.readAsText(e)}updatePatternList(){const t=document.getElementById("loadPattern"),e=wt();t.innerHTML='<option value="">-- Select Pattern --</option>',e.forEach(n=>{const s=document.createElement("option");s.value=n,s.textContent=n,t.appendChild(s)})}async initMIDI(){try{await p.init(),this.updateMIDIDeviceList(),this.updateMIDIStatus()}catch(t){this.updateMIDIStatus(t.message)}}updateMIDIDeviceList(){const t=document.getElementById("midiDevice"),e=p.getOutputDevices();t.innerHTML='<option value="">-- Select device --</option>',e.forEach(n=>{const s=document.createElement("option");s.value=n.id,s.textContent=n.name,t.appendChild(s)}),t.disabled=e.length===0}updateMIDIStatus(t=null){const e=p.getStatus(),n=document.getElementById("midiStatus");t?(n.textContent=`Error: ${t}`,n.className="error-box"):e.isSupported?e.isInitialized?e.hasDevice?(n.textContent=`Connected: ${e.deviceName}`,n.className="success-box"):(n.textContent="MIDI ready - select a device",n.className="info-box"):(n.textContent="MIDI not initialized",n.className="warning-box"):(n.textContent="WebMIDI not supported (use Chrome/Brave/Edge)",n.className="warning-box")}sendHighlightedNotes(){const t=this.getHighlightedPCs(),e=[];for(let n=0;n<39;n++){const s=this.settings.baseMidi+n,i=s%12;t.has(i)&&e.push(s)}p.playChord(e,100,null,20)}updatePatternMetadata(){const t=document.getElementById("key").value,e=document.getElementById("set").value;this.currentPattern.metadata.key=t,this.currentPattern.metadata.setType=e,this.currentPattern.metadata.modifiedAt=Date.now()}updateMIDIHoldIfActive(){const t=document.getElementById("midiHoldToggle");t&&t.checked&&p.getStatus().isHolding&&(p.releaseAllNotes(),this.sendHighlightedNotes())}analyzeErgonomics(){const t=H.analyzePattern(this.currentPattern),e=document.getElementById("ergoResult");e&&(e.innerHTML=`
        <div class="score-display">
          <div class="score-label">Ergonomic Score</div>
          <div class="score-value">${t.score}</div>
          <div class="score-recommendation">${t.recommendation}</div>
        </div>
        ${t.issues.length>0?`
          <h4>Issues Found:</h4>
          <ul class="issue-list">
            ${t.issues.map(n=>`<li class="issue-item">${this.formatIssue(n)}</li>`).join("")}
          </ul>
        `:'<div class="success-box">No ergonomic issues found!</div>'}
      `)}formatIssue(t){switch(t.type){case"excessive_stretch":return`Excessive stretch between fingers ${t.fingers.join(" and ")} (${t.hand} hand)`;case"uncomfortable_stretch":return`Uncomfortable stretch between fingers ${t.fingers.join(" and ")} (${t.hand} hand)`;case"finger_crossing":return`Possible finger crossing: fingers ${t.fingers.join(" and ")} (${t.hand} hand)`;default:return JSON.stringify(t)}}selectHandForCapture(t){this.handprintCaptureHand=t;const e=document.getElementById("selectLeftHand"),n=document.getElementById("selectRightHand");t==="left"?(e==null||e.classList.add("active"),n==null||n.classList.remove("active")):(n==null||n.classList.add("active"),e==null||e.classList.remove("active"))}async startHandprintCapture(){if(this.handprintMode){this.stopHandprintSession();return}const t=document.getElementById("startHandprintCapture");if(t.textContent="Stop Capture",t.style.background="#c44",!p.getStatus().isInitialized)try{await p.init(),this.updateMIDIDeviceList(),this.updateMIDIStatus();const n=p.getOutputDevices();if(n.length>0){const i=n.find(o=>o.name.toLowerCase().includes("exquis"))||n[0];p.selectOutputDevice(i.id),document.getElementById("midiDevice").value=i.id,this.updateMIDIStatus()}}catch(n){alert(`Cannot enable MIDI: ${n.message}

Fallback: You can click pads on the grid instead.`)}this.handprintMode=!0,this.handprintCaptureState="waiting_basenote",this.handprintCaptures=[],this.handprintSessionBaseMidi=this.settings.baseMidi,this.handprintSessionPadOffset=null,this.handprintSessionID=`session_${Date.now()}`,this.handprintSessionCount=0,this.lastHandprintNoteTime=0,this.preCaptureLabelMode=this.settings.labelMode,this.settings.labelMode="index",$("chromatic"),p.enterExquisDeveloperMode(),this.render();const e=document.getElementById("handprintCaptureStatus");e&&(e.innerHTML=`
        <div style="background:#334; padding:12px; border-radius:4px; margin-top:8px;">
          <strong>Calibration - ${this.handprintCaptureHand.toUpperCase()} hand</strong><br/>
          <strong style="color:#6f6;">Press bottom-left pad (0,0) to calibrate</strong><br/>
          <span style="font-size:0.85em; opacity:0.7;">This sets the reference point for your handprint</span>
          <div style="margin-top:8px; font-size:1.2em; color:#6af;">
            <strong id="handprintCounter">Waiting for calibration...</strong>
          </div>
        </div>
      `),p.setNoteHandler((n,s)=>{if(this.handprintMode&&s>0){const i=Date.now();i-this.lastHandprintNoteTime>100&&(this.lastHandprintNoteTime=i,this.handleHandprintPadID(n))}},!0)}stopHandprintSession(){const t=this.handprintSessionCount>0;p.exitExquisDeveloperMode(),this.handprintMode=!1,this.handprintCaptureState=null,this.handprintCaptures=[],this.handprintSessionBaseMidi=null,this.handprintSessionID=null,this.handprintSessionCount=0,p.setNoteHandler(null),this.preCaptureLabelMode&&(this.settings.labelMode=this.preCaptureLabelMode,this.preCaptureLabelMode=null),$("intervals");const e=document.getElementById("handprintCaptureStatus");e&&(e.innerHTML=`
        <div style="padding:8px; opacity:0.7;">
          ${t?`Session complete. Captured ${t} handprint${t>1?"s":""}.`:"Session cancelled."}
        </div>
      `,setTimeout(()=>{e.innerHTML=""},2e3));const n=document.getElementById("startHandprintCapture");n.textContent="Start Capture",n.style.background="",this.render()}handleHandprintPadID(t){if(this.handprintCaptureState==="waiting_basenote"){this.handprintSessionPadOffset=t,this.handprintCaptureState="capturing_fingers",v("handprint",`[HANDPRINT] Developer Mode calibrated: pad 0,0 has ID ${t}`);const n=document.getElementById("handprintCaptureStatus");n&&(n.innerHTML=`
          <div style="background:#334; padding:12px; border-radius:4px; margin-top:8px;">
            <strong>Capture Active - ${this.handprintCaptureHand.toUpperCase()} hand</strong><br/>
            <strong style="color:#6f6;">Press 5 fingers in order 👍 1 → 2 → 3 → 4 → 5 🤙</strong>
            <div style="margin-top:8px; font-size:1.2em; color:#6af;">
              <strong id="handprintCounter">Captured: 0/5</strong>
            </div>
          </div>
        `),this.render();return}if(this.handprintCaptureState!=="capturing_fingers"||this.handprintCaptures.length>=5)return;const e=t-this.handprintSessionPadOffset;if(this.handprintCaptures.some(n=>n.padIndex===e)){console.log("Ignoring duplicate pad:",e);return}try{const{row:n,col:s}=dt(e),i=this.handprintSessionBaseMidi+e;this.handprintCaptures.push({row:n,col:s,padIndex:e,midiNote:i,finger:this.handprintCaptures.length+1,timestamp:Date.now()});const o=document.getElementById("handprintCounter");o&&(o.textContent=`Captured: ${this.handprintCaptures.length}/5`),this.render(),this.handprintCaptures.length===5&&this.finishHandprintCapture()}catch(n){console.error("Invalid pad index:",e,"from pad ID:",t,n)}}handleHandprintClick(t,e){if(this.handprintCaptureState!=="capturing_fingers"||this.handprintCaptures.length>=5)return;const n=M(t,e);if(this.handprintCaptures.some(o=>o.padIndex===n)){console.log("Ignoring duplicate pad click:",n);return}const s=this.handprintSessionBaseMidi+n;this.handprintCaptures.push({row:t,col:e,padIndex:n,midiNote:s,finger:this.handprintCaptures.length+1,timestamp:Date.now()});const i=document.getElementById("handprintCounter");i&&(i.textContent=`Captured: ${this.handprintCaptures.length}/5 (click)`),this.render(),this.handprintCaptures.length===5&&this.finishHandprintCapture()}finishHandprintCapture(){var e,n;this.handprintCaptureState="rating";const t=document.getElementById("handprintCaptureStatus");if(t){t.innerHTML=`
        <div style="background:#243; padding:12px; border-radius:4px; margin-top:8px;">
          <strong>Handprint Captured!</strong><br/>
          How comfortable was this position?
          <div style="margin-top:12px;">
            <input type="range" id="comfortRating" min="0" max="100" value="100"
                   style="width:100%;" />
            <div style="display:flex; justify-content:space-between; font-size:0.85em; opacity:0.7;">
              <span>Uncomfortable</span>
              <span id="comfortValue">100</span>
              <span>Very Comfortable</span>
            </div>
          </div>
          <button id="saveHandprintWithRating" style="width:100%; margin-top:12px; background:#4a6;">
            Save Handprint
          </button>
          <button id="discardHandprint" style="width:100%; margin-top:4px; background:#666;">
            Discard
          </button>
        </div>
      `;const s=document.getElementById("comfortRating"),i=document.getElementById("comfortValue");s==null||s.addEventListener("input",o=>{i.textContent=o.target.value}),(e=document.getElementById("saveHandprintWithRating"))==null||e.addEventListener("click",()=>{const o=parseInt((s==null?void 0:s.value)||"100");this.saveHandprint(o)}),(n=document.getElementById("discardHandprint"))==null||n.addEventListener("click",()=>{this.discardHandprint()})}this.render()}saveHandprint(t){const e={};for(let c=0;c<5;c++)for(let l=c+1;l<5;l++){const h=this.handprintCaptures[c],g=this.handprintCaptures[l],m=Math.sqrt(Math.pow(g.row-h.row,2)+Math.pow(g.col-h.col,2)),f=`${c+1}-${l+1}`;e[f]=m}const s=p.getStatus().deviceName||"Unknown",o={id:`${this.handprintCaptureHand}_${Date.now()}`,sessionID:this.handprintSessionID,hand:this.handprintCaptureHand,orientation:this.settings.orientation,baseMidi:this.handprintSessionBaseMidi,midiDevice:s,comfortRating:t,positions:this.handprintCaptures,measurements:e,capturedAt:Date.now()};this.savedHandprints.push(o),this.settings.handprints=this.savedHandprints,S(this.settings),this.handprintSessionCount++,this.updateHandprintList();const r=document.getElementById("handprintCaptureStatus");r&&(r.innerHTML=`
        <div style="background:#243; padding:12px; border-radius:4px; margin-top:8px; color:#6f6;">
          ✓ Handprint ${this.handprintSessionCount} Saved!<br/>
          <strong>Comfort:</strong> ${t}/100<br/>
          <strong>Session total:</strong> ${this.handprintSessionCount} handprint(s)
          <div style="margin-top:8px; border-top:1px solid #444; padding-top:8px;">
            Press another pad to capture next handprint,<br/>
            or click "Stop Capture" to finish.
          </div>
        </div>
      `),this.handprintCaptures=[],this.handprintCaptureState="capturing_fingers";const d=document.getElementById("handprintCounter");d&&(d.textContent="Captured: 0/5"),this.render()}discardHandprint(){this.handprintCaptures=[],this.handprintCaptureState="capturing_fingers";const t=document.getElementById("handprintCaptureStatus");t&&(t.innerHTML=`
        <div style="background:#334; padding:12px; border-radius:4px; margin-top:8px;">
          <strong>Capture Active - ${this.handprintCaptureHand.toUpperCase()} hand</strong><br/>
          <strong style="color:#6f6;">Press 5 fingers in order 👍 1 → 2 → 3 → 4 → 5 🤙</strong>
          <div style="margin-top:8px; font-size:1.2em; color:#6af;">
            <strong id="handprintCounter">Captured: 0/5</strong>
          </div>
          <div style="margin-top:8px; padding-top:8px; border-top:1px solid #444; font-size:0.9em; opacity:0.7;">
            Previous handprint discarded. Ready for next capture.
          </div>
        </div>
      `),this.render()}updateHandprintList(){const t=document.getElementById("handprintList"),e=document.getElementById("exportHandprints"),n=document.getElementById("clearHandprints");if(this.savedHandprints.length===0){t.innerHTML='<div style="opacity:0.7;">No handprints captured yet.</div>',e.style.display="none",n.style.display="none";return}t.innerHTML=this.savedHandprints.map(s=>{const o=new Date(s.capturedAt).toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"}),r=s.comfortRating||"?";return`
        <div class="handprint-item ${s.hand}">
          <strong>${s.hand.toUpperCase()}</strong> | Comfort: ${r}/100<br/>
          <span style="font-size:0.85em; opacity:0.7;">MIDI ${s.baseMidi} | ${s.orientation} | ${o}</span>
        </div>
      `}).join(""),e.style.display="block",n.style.display="block"}clearAllHandprints(){confirm(`Clear all ${this.savedHandprints.length} handprint(s)?

This cannot be undone!`)&&(this.savedHandprints=[],this.settings.handprints=[],S(this.settings),this.updateHandprintList(),alert("All handprints cleared."))}exportHandprints(){if(this.savedHandprints.length===0){alert("No handprints to export.");return}const t={exportedAt:new Date().toISOString(),handprints:this.savedHandprints},e=JSON.stringify(t,null,2),n=new Blob([e],{type:"application/json"}),s=URL.createObjectURL(n),i=document.createElement("a");i.href=s,i.download=`handprints_${new Date().toISOString().slice(0,19).replace(/:/g,"")}.json`,document.body.appendChild(i),i.click(),document.body.removeChild(i),URL.revokeObjectURL(s),alert(`Exported ${this.savedHandprints.length} handprint(s) to JSON file.`)}findChordFingeringSuggestions(){const t=[];if(document.querySelectorAll('input[name="chordNote"]:checked').forEach(s=>{t.push(parseInt(s.value))}),t.length<3){const s=document.getElementById("chordSuggestionsStatus");s.innerHTML=`
        <div class="warning-box" style="margin-top:8px;">
          Please select at least 3 notes for a chord.
        </div>
      `;return}if(t.length>5){const s=document.getElementById("chordSuggestionsStatus");s.innerHTML=`
        <div class="warning-box" style="margin-top:8px;">
          Please select no more than 5 notes for block chords.
        </div>
      `;return}if(this.savedHandprints.length===0){const s=document.getElementById("chordSuggestionsStatus");s.innerHTML=`
        <div class="warning-box" style="margin-top:8px;">
          No handprints available. Please capture some handprints first.
        </div>
      `;return}const e=Bt(t,this.savedHandprints,this.settings.baseMidi);if(e.length===0){const s=document.getElementById("chordSuggestionsStatus");s.innerHTML=`
        <div class="info-box" style="margin-top:8px;">
          No matching fingerings found in your handprints.
          Try capturing more handprint positions.
        </div>
      `,document.getElementById("chordSuggestions").style.display="none";return}const n=Tt(e);this.displayChordSuggestions(n,t)}displayChordSuggestions(t,e){const n=document.getElementById("chordSuggestionsStatus"),s=document.getElementById("chordSuggestions"),i=document.getElementById("suggestionsList");n.innerHTML=`
      <div class="success-box" style="margin-top:8px;">
        Found ${t.length} matching fingering${t.length>1?"s":""}!
      </div>
    `;const o=t.slice(0,5);i.innerHTML=o.map((r,d)=>{const c=r.positions.sort((h,g)=>h.finger-g.finger).map(h=>`F${h.finger}`).join("-"),l=[...new Set(r.positions.map(h=>h.pitchClass))].sort((h,g)=>h-g).map(h=>["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"][h]).join("-");return`
        <div class="suggestion-item" style="
          background: ${d===0?"#eef":"#f5f5f5"};
          border: 2px solid ${d===0?"#6aa5ff":"#ddd"};
          border-radius: 6px;
          padding: 12px;
          margin-bottom: 8px;
          cursor: pointer;
        " data-suggestion-index="${d}">
          <div style="display:flex; justify-content:space-between; align-items:center; margin-bottom:8px;">
            <strong style="color:#446; font-size:1.1em;">#${d+1} ${l}</strong>
            <span style="background:#446; color:#fff; padding:4px 8px; border-radius:12px; font-size:0.9em; font-weight:bold;">
              ${r.score}
            </span>
          </div>
          <div style="font-size:0.85em; opacity:0.8; margin-bottom:4px;">
            Fingers: ${c} (${r.hand} hand)
          </div>
          <div style="display:flex; gap:8px; font-size:0.75em; opacity:0.7;">
            <span title="Comfort">💆 ${r.comfortScore}</span>
            <span title="Geometry">📐 ${r.geometricScore}</span>
            <span title="Ergonomics">✋ ${r.ergonomicScore}</span>
          </div>
          ${d===0?'<div style="margin-top:8px; font-size:0.85em; color:#446;">⭐ Best match - Click to view on grid</div>':""}
        </div>
      `}).join(""),i.querySelectorAll(".suggestion-item").forEach((r,d)=>{r.addEventListener("click",()=>{this.showSuggestionOnGrid(o[d])})}),s.style.display="block"}showSuggestionOnGrid(t){const e=new E("chord_suggestion");t.positions.forEach(i=>{e.setFingering(i.row,i.col,t.hand,i.finger)}),this.currentPattern=e,this.render();const n=new Set(t.positions.map(i=>i.pitchClass));this.gridRenderer.setHighlightedPCs(n),this.gridRenderer.render();const s=document.getElementById("chordSuggestionsStatus");s.innerHTML=`
      <div class="success-box" style="margin-top:8px;">
        ✓ Showing suggestion on grid. Click "Find Fingerings" to see other options.
      </div>
    `}generateChordSuggestion(){const t=this.getHighlightedPCs();if(t.size===0){alert("No chord selected. Please select a key and chord type first.");return}const e=Array.from(t);if(this.savedHandprints.length===0){alert("No handprints available. Please capture some handprints first.");return}const n=document.getElementById("suggestionHand").value,s=Wt(e,this.savedHandprints,this.settings.baseMidi,n,10);if(s.length===0){alert("Could not generate suggestions for this chord. Try a different range or capture more handprints.");return}this.currentSuggestions=s,this.currentSuggestionIndex=0,this.displayCurrentSuggestion()}displayCurrentSuggestion(){if(this.currentSuggestions.length===0)return;const t=this.currentSuggestions[this.currentSuggestionIndex],e=new E("synthesized_suggestion");t.positions.forEach(r=>{e.setFingering(r.row,r.col,t.hand,r.finger)}),this.currentPattern=e,this.render();const n=new Set(t.targetPitchClasses);this.gridRenderer.setHighlightedPCs(n),this.gridRenderer.render();const s=document.getElementById("suggestionDisplay"),i=t.targetPitchClasses.sort((r,d)=>r-d).map(r=>["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"][r]).join("-"),o=t.positions.sort((r,d)=>r.finger-d.finger).map(r=>(`${r.row}${r.col}`,`
          <div style="display:flex; align-items:center; gap:8px; margin:4px 0;">
            <span style="font-weight:bold;">Finger ${r.finger}:</span>
            <span>r${r.row}c${r.col}</span>
            <button class="change-finger-btn" data-row="${r.row}" data-col="${r.col}" data-current-finger="${r.finger}"
              style="padding:2px 8px; background:#446; color:#fff; border:none; border-radius:3px; cursor:pointer; font-size:0.8em;">
              Change
            </button>
          </div>
        `)).join("");s.innerHTML=`
      <div style="margin-bottom:8px;">
        <strong style="color:#446;">${i}</strong> (${t.hand} hand)
      </div>
      <div style="font-size:0.85em;">
        ${o}
      </div>
      <div style="margin-top:8px; font-size:0.85em; opacity:0.7;">
        Suggestion ${this.currentSuggestionIndex+1} of ${this.currentSuggestions.length}
        • Score: ${Math.round(t.score)}
      </div>
    `,s.querySelectorAll(".change-finger-btn").forEach(r=>{r.addEventListener("click",d=>{d.stopPropagation();const c=parseInt(r.dataset.row),l=parseInt(r.dataset.col),h=parseInt(r.dataset.currentFinger);this.showFingerSelector(c,l,h)})}),document.getElementById("currentSuggestion").style.display="block"}showNextSuggestion(){this.currentSuggestions.length!==0&&(this.currentSuggestionIndex=(this.currentSuggestionIndex+1)%this.currentSuggestions.length,this.displayCurrentSuggestion())}saveSuggestionAsPattern(){if(this.currentSuggestions.length===0)return;const t=this.currentSuggestions[this.currentSuggestionIndex],e=document.getElementById("key").value,n=document.getElementById("set").value,s=document.querySelector(`#set option[value="${n}"]`).textContent,i=`${e} ${s}`,o=new E(i);t.positions.forEach(c=>{o.setFingering(c.row,c.col,t.hand,c.finger)}),o.metadata={key:e,setType:n,baseMidi:this.settings.baseMidi,createdAt:Date.now(),modifiedAt:Date.now(),comfortRating:this.currentSuggestionRating,synthesized:!0,hand:t.hand};const r={...o.toJSON(),...o.metadata},d=JSON.parse(localStorage.getItem("fingeringPatterns")||"{}");d[i]=r,localStorage.setItem("fingeringPatterns",JSON.stringify(d)),this.updatePatternList(),alert(`Saved as "${i}" with comfort rating ${this.currentSuggestionRating}/5`)}showFingerSelector(t,e,n){const s=this.currentSuggestions[this.currentSuggestionIndex],i=new Set(s.positions.map(d=>d.finger));i.delete(n);const o=[];for(let d=1;d<=5;d++){const c=i.has(d),l=d===n,h=l?`${d} (current)`:c?`${d} (used)`:`${d}`,g=c?"disabled":"",m=l?"background:#6aa5ff;":c?"opacity:0.3;":"";o.push(`
        <button onclick="window.app.changeSuggestionFinger(${t}, ${e}, ${d})"
          ${g}
          style="padding:12px 20px; margin:4px; font-size:1.2em; cursor:pointer; border:2px solid #446; border-radius:4px; ${m}">
          ${h}
        </button>
      `)}const r=document.createElement("div");r.id="fingerSelectorModal",r.style.cssText=`
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0,0,0,0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 10000;
    `,r.innerHTML=`
      <div style="background:#fff; padding:24px; border-radius:8px; box-shadow:0 4px 12px rgba(0,0,0,0.3); max-width:400px;">
        <h3 style="margin:0 0 16px 0; color:#446;">Select Finger for r${t}c${e}</h3>
        <div style="display:flex; flex-wrap:wrap; justify-content:center;">
          ${o.join("")}
        </div>
        <button onclick="document.getElementById('fingerSelectorModal').remove()"
          style="width:100%; margin-top:16px; padding:8px; background:#666; color:#fff; border:none; border-radius:4px; cursor:pointer;">
          Cancel
        </button>
      </div>
    `,document.body.appendChild(r),r.addEventListener("click",d=>{d.target===r&&r.remove()})}changeSuggestionFinger(t,e,n){var r;if(this.currentSuggestions.length===0)return;const s=this.currentSuggestions[this.currentSuggestionIndex],i=s.positions.findIndex(d=>d.row===t&&d.col===e);if(i===-1)return;if(s.positions.some((d,c)=>c!==i&&d.finger===n)){alert(`Finger ${n} is already assigned to another pad. Please choose a different finger.`);return}s.positions[i].finger=n,(r=document.getElementById("fingerSelectorModal"))==null||r.remove(),this.displayCurrentSuggestion()}handleSuggestionEditClick(t,e){if(this.currentSuggestions.length===0)return;const s=this.currentSuggestions[this.currentSuggestionIndex].positions.find(i=>i.row===t&&i.col===e);s&&this.showFingerSelector(t,e,s.finger)}selectChordCaptureHand(t){this.chordCaptureHand=t,document.getElementById("captureLeftHand").classList.toggle("active",t==="left"),document.getElementById("captureRightHand").classList.toggle("active",t==="right")}async startChordCapture(){const t=parseInt(document.getElementById("chordRoot").value),e=document.getElementById("chordQuality").value,n=Xt(t,e),s=N(t,e);if(this.chordCaptureRoot=t,this.chordCaptureQuality=e,this.chordCapturePitchClasses=n,this.chordCaptureSequence=[],!p.getStatus().isInitialized)try{await p.init(),this.updateMIDIDeviceList(),this.updateMIDIStatus();const o=p.getOutputDevices();if(o.length>0){const d=o.find(c=>c.name.toLowerCase().includes("exquis"))||o[0];p.selectOutputDevice(d.id),document.getElementById("midiDevice").value=d.id,this.updateMIDIStatus(),console.log("[ChordCapture] Auto-selected MIDI device:",d.name)}}catch(o){alert(`Cannot enable MIDI: ${o.message}`);return}if(!p.selectedOutput){alert("Please select a MIDI output device first.");return}const i=p.getDevMode();console.log("[ChordCapture] Dev mode instance:",i),this.chordCaptureActive=!0;try{await i.enter(1),console.log("[ChordCapture] Entered dev mode"),i.highlightChord(n,t,0,0),console.log("[ChordCapture] Highlighted chord:",s,"PCs:",n),i.on("padPress",(o,r)=>{console.log("[ChordCapture] Pad press event:",o,r),this.handleChordCapturePadPress(o,r)}),p.setNoteHandler(()=>{},!0),console.log("[ChordCapture] Enabled MIDI input handler for dev mode"),document.getElementById("chordCaptureStatus").innerHTML=`
        <div class="success-box">
          ✓ Capturing ${s} - Press pads in finger sequence (1→5)
        </div>
      `,document.getElementById("chordCaptureActive").style.display="block",this.updateCaptureProgress()}catch(o){this.chordCaptureActive=!1,alert(`Failed to enter developer mode: ${o.message}`),console.error("Dev mode error:",o)}}handleChordCapturePadPress(t,e){if(console.log("[ChordCapture] handleChordCapturePadPress called:",{padId:t,velocity:e,active:this.chordCaptureActive}),!this.chordCaptureActive){console.log("[ChordCapture] Ignoring pad press - capture not active");return}const n=this.chordCaptureSequence.length+1;if(n>5){console.log("[ChordCapture] Ignoring pad press - already have 5 fingers");return}this.chordCaptureSequence.push({padId:t,finger:n,timestamp:Date.now(),velocity:e}),console.log("[ChordCapture] Recorded pad press - finger",n,"at pad",t),this.updateCaptureProgress(),this.chordCaptureSequence.length>=5&&(console.log("[ChordCapture] Captured all 5 fingers, stopping..."),setTimeout(()=>{this.stopChordCapture()},300))}updateCaptureProgress(){const t=document.getElementById("captureProgress"),e=this.chordCaptureSequence.length,n=this.chordCaptureSequence.map(s=>`F${s.finger}:Pad${s.padId}`).join(", ");t.innerHTML=`
      Captured: ${e}/5 fingers<br>
      ${n||"Press first pad with finger 1..."}
    `}async stopChordCapture(){if(!this.chordCaptureActive)return;await p.getDevMode().exit(),p.setNoteHandler(null,!1),this.chordCaptureActive=!1,this.chordCaptureSequence.length>=3?this.showChordCaptureRating():(document.getElementById("chordCaptureStatus").innerHTML=`
        <div class="warning-box">
          Capture stopped. Need at least 3 fingers for a valid fingering.
        </div>
      `,document.getElementById("chordCaptureActive").style.display="none",this.chordCaptureSequence=[])}showChordCaptureRating(){document.getElementById("chordCaptureActive").style.display="none",this.chordCaptureSequence.filter(n=>{const s=n.padId%12;return this.chordCapturePitchClasses.includes(s)});const t=document.getElementById("capturedFingeringDisplay"),e=N(this.chordCaptureRoot,this.chordCaptureQuality);t.innerHTML=`
      <strong>${e}</strong> (${this.chordCaptureHand} hand)<br>
      ${this.chordCaptureSequence.map(n=>{const s=this.chordCapturePitchClasses.includes(n.padId%12),i=s?`Finger ${n.finger}: Pad ${n.padId}`:`Finger ${n.finger}: SKIP (Pad ${n.padId})`;return`<div style="opacity:${s?1:.5}">${i}</div>`}).join("")}
    `,document.getElementById("chordCaptureRate").style.display="block"}saveChordFingering(){const t=parseInt(document.getElementById("captureComfort").value),e=this.chordCaptureSequence.map(i=>({padId:i.padId,finger:i.finger,timestamp:i.timestamp})),n={id:`chord_${Date.now()}`,chordRoot:this.chordCaptureRoot,chordQuality:this.chordCaptureQuality,pitchClasses:this.chordCapturePitchClasses,hand:this.chordCaptureHand,positions:e,comfortRating:t,capturedAt:Date.now()};this.savedChordFingerings.push(n),this.settings.chordFingerings=this.savedChordFingerings,S(this.settings);const s=N(this.chordCaptureRoot,this.chordCaptureQuality);document.getElementById("chordCaptureStatus").innerHTML=`
      <div class="success-box">
        ✓ Saved ${s} fingering (comfort: ${t}/5)
      </div>
    `,document.getElementById("chordCaptureRate").style.display="none",this.chordCaptureSequence=[],this.updateChordFingeringList()}discardChordFingering(){document.getElementById("chordCaptureRate").style.display="none",document.getElementById("chordCaptureStatus").innerHTML="",this.chordCaptureSequence=[]}updateChordFingeringList(){const t=document.getElementById("chordFingeringList");if(this.savedChordFingerings.length===0){t.innerHTML='<div style="opacity:0.7;">No chord fingerings captured yet.</div>',document.getElementById("exportChordFingerings").style.display="none",document.getElementById("clearChordFingerings").style.display="none";return}t.innerHTML=this.savedChordFingerings.map((e,n)=>`
        <div style="padding:6px; background:#f5f5f5; border-radius:3px; margin-bottom:4px;">
          <strong>${N(e.chordRoot,e.chordQuality)}</strong> (${e.hand})<br>
          <span style="font-size:0.85em;">
            ${e.positions.length} fingers • Comfort: ${e.comfortRating}/5
          </span>
        </div>
      `).join(""),document.getElementById("exportChordFingerings").style.display="block",document.getElementById("clearChordFingerings").style.display="block"}}document.addEventListener("DOMContentLoaded",()=>{window.app=new Zt});
